######### Scripts
export PATH="$PATH:$HOME/bin"

##
# Homebrew
##
export HOMEBREW_GITHUB_API_TOKEN=
export PATH="/usr/local/sbin:$PATH"

# mysql
export PATH="$PATH:/usr/local/mysql/bin"

# Python
export PYTHONSTARTUP="$HOME/.pythonrc.py"
export WORKON_HOME="$HOME/.virtualenvs"
# source /usr/local/bin/virtualenvwrapper.sh

# Put openssl in PKG_CONFIG_PATH
export PKG_CONFIG_PATH="$PATH:/usr/local/opt/openssl/lib/pkgconfig:/usr/lib/pkgconfig/:/usr/local/lib/pkgconfig/"

# Organizing Cluster Access Using kubeconfig Files
export KUBECONFIG="$KUBECONFIG:$HOME/.kube/config"

# Nim
export PATH="$PATH:/Users/ccianos/.nimble/bin"

# Node
export PATH="/usr/local/Cellar/node/23.7.0/bin:$PATH"

# openssl is keg-only, which means it was not symlinked into /usr/local,
# because Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries.
# See brew info openssl.
# Add openssl in PATH.
export PATH="$PATH:/usr/local/opt/openssl/bin"
# For compilers to find openssl.
export LDFLAGS="-L/usr/local/opt/openssl/lib"
export CPPFLAGS="-I/usr/local/opt/openssl/include"
# For pkg-config to find openssl.
export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"

#Vim
export PATH="$PATH:/usr/local/bin/vim"

# ascii-image-converter
export PATH="$PATH:/usr/local/bin/ascii-image-converter"

# Go tooling and bins
export PATH="$PATH:$(go env GOPATH)/bin"

# Dart and Flutter
export PATH="$PATH:/usr/local/bin/dart"
export PATH="$PATH:/usr/local/bin/flutter"

###-begin-flutter-completion-###

if type complete &>/dev/null; then
  __flutter_completion() {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           flutter completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -F __flutter_completion flutter
elif type compdef &>/dev/null; then
  __flutter_completion() {
    si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 flutter completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef __flutter_completion flutter
elif type compctl &>/dev/null; then
  __flutter_completion() {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       flutter completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K __flutter_completion flutter
fi

###-end-flutter-completion-###

####-begin-dart-completion-###

if type complete &>/dev/null; then
  __dart_completion() {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           dart completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -F __dart_completion dart
elif type compdef &>/dev/null; then
  __dart_completion() {
    si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 dart completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef __dart_completion dart
elif type compctl &>/dev/null; then
  __dart_completion() {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       dart completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K __dart_completion dart
fi

###-end-dart-completion-###

# anaconda3
export PATH="/usr/local/anaconda3/bin:$PATH"

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
